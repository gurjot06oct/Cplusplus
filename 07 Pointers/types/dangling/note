A dangling pointer in C++ is a pointer that references a memory location that has been deallocated or freed. Accessing or manipulating such pointers can lead to undefined behavior, including crashes, data corruption, or security vulnerabilities.

### Causes of Dangling Pointers

1. **Deallocation of Memory**: When memory pointed to by a pointer is deallocated using `delete` or `delete[]`.
2. **Local Scope Exiting**: When a pointer points to a local variable that goes out of scope.

### Preventing Dangling Pointers

1. **Set Pointer to `nullptr` After Deallocation**: Always set pointers to `nullptr` after deallocating the memory they point to.

2. **Use Smart Pointers**: Smart pointers in C++ (like `std::unique_ptr` and `std::shared_ptr`) automatically manage the memory they point to, reducing the risk of dangling pointers.

3. **Avoid Returning Pointers to Local Variables**: Never return the address of local variables from a function.
